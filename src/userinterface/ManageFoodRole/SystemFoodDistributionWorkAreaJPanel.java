/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ManageFoodRole;

import business.EcoSystem;
import business.Enterprise.Enterprise;
import business.Enterprise.FoodBankEnterprise;
import business.Enterprise.FoodSupplierEnterprise;
import business.Food.Food;
import business.Food.Food.FoodType;
import business.Food.FoodCatalog;
import business.Network.Network;
import business.Organization.Organization;
import business.VolunteerJob.VolunteerJob;
import business.WorkQueue.ApplyVolunteerRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import userinterface.Enterprise.FoodBankInfoJPanel;

/**
 *
 * @author gundamwings
 */
public class SystemFoodDistributionWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private Map<Enterprise, FoodCatalog> cart;
    private DefaultMutableTreeNode selectedNode;

    /**
     * Creates new form SystemFoodDistributionWorkAreaJPanel
     */
    public SystemFoodDistributionWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        cart = new HashMap<>();
        populateTree();
        foodTypeJComboBox.removeAllItems();
        for (FoodType ft : Food.getFoodTypes()) {
            foodTypeJComboBox.addItem(ft);
        }
    }

    public void populateTree() {
        DefaultTreeModel model = (DefaultTreeModel) treeFoodBank.getModel();
        ArrayList<Network> networkList = system.getNetworkList();
        ArrayList<Enterprise> enterpriseList;
        ArrayList<Organization> organizationList;
        Network network;
        Enterprise enterprise;
        Organization organization;

        DefaultMutableTreeNode networks = new DefaultMutableTreeNode("Networks");
        model.setRoot(networks);
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        DefaultMutableTreeNode networkNode;
        DefaultMutableTreeNode enterpriseNode;
        DefaultMutableTreeNode organizationNode;

        for (int i = 0; i < networkList.size(); i++) {
            network = networkList.get(i);
            networkNode = new DefaultMutableTreeNode(network);
            networks.insert(networkNode, i);

            enterpriseList = network.getEnterpriseDirectory().getEnterpriseList();
            int index = 0;
            for (int j = 0; j < enterpriseList.size(); j++) {
                enterprise = enterpriseList.get(j);
                if (enterprise instanceof FoodBankEnterprise) {
                    enterpriseNode = new DefaultMutableTreeNode(enterprise);
                    networkNode.insert(enterpriseNode, index);
                    index++;
                }
            }
        }
        model.reload();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblFoodInfo.getModel();

        model.setRowCount(0);
        for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof FoodSupplierEnterprise) {
                    for (Food f : e.getFoods().getFoodList()) {
                        if ((FoodType) foodTypeJComboBox.getSelectedItem() == f.getFoodType()) {
                            Object[] row = new Object[4];
                            row[0] = f.getFoodType();
                            row[1] = f;
                            row[2] = f.getQuantity();
                            row[3] = e;
                            model.addRow(row);
                        }
                    }
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFoodInfo = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAddToCart = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        foodTypeJComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        txtQuantity = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        treeFoodBank = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(110);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Name", "Quantity", "Food Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblCart);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 613, 125));

        jLabel1.setFont(new java.awt.Font("宋体", 1, 24)); // NOI18N
        jLabel1.setText("Distribute Food");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 15, -1, -1));

        tblFoodInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Food Type", "Food Name", "Quantity", "Food Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFoodInfo);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 613, 170));

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, -1, -1));

        btnAddToCart.setText("Add To Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 290, -1, -1));

        jLabel3.setText("Items in cart:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        foodTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodTypeJComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(foodTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 70, 90, -1));

        jLabel4.setText("Food Type:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel2.setText("Quantity:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        btnSend.setText("Send>>");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        jPanel1.add(btnSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 520, -1, -1));
        jPanel1.add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 70, -1));

        jSplitPane1.setRightComponent(jPanel1);

        treeFoodBank.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeFoodBankValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(treeFoodBank);

        jSplitPane1.setLeftComponent(jScrollPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void foodTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodTypeJComboBoxActionPerformed
        populateTable();
    }//GEN-LAST:event_foodTypeJComboBoxActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (selectedNode != null && selectedNode.getUserObject() instanceof FoodBankEnterprise) {
            FoodBankEnterprise e = (FoodBankEnterprise) selectedNode.getUserObject();
            for (Map.Entry<Enterprise, FoodCatalog> entry : cart.entrySet()) {
                for (Food f : entry.getValue().getFoodList()) {
                    e.getFoods().addFood(f);
                }
            }
            cart.clear();
            populateCart();
            JOptionPane.showMessageDialog(null, "Food has been sent", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a food bank from list", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        int row = tblFoodInfo.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Food f = (Food) tblFoodInfo.getValueAt(row, 1);
        Enterprise e = (FoodSupplierEnterprise) tblFoodInfo.getValueAt(row, 3);
        int quantity = 0;
        try {
            quantity = Integer.parseInt(txtQuantity.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Please enter a valid quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (f.getQuantity() < quantity) {
            JOptionPane.showMessageDialog(null, "Please enter a valid quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        FoodCatalog fl = cart.get(e);
        if (fl == null) {
            fl = new FoodCatalog();
        }
        if (f.getQuantity() == quantity) {
            e.getFoods().getFoodList().remove(f);
            fl.addFood(f);
            cart.put(e, fl);
        } else {
            f.setQuantity(f.getQuantity() - quantity);
            Food nf = new Food();
            nf.setFoodName(f.getFoodName());
            nf.setFoodType(f.getFoodType());
            nf.setQuantity(quantity);
            fl.addFood(nf);
            cart.put(e, fl);
        }
        populateTable();
        populateCart();
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int row = tblCart.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Food f = (Food) tblCart.getValueAt(row, 0);
        Enterprise e = (FoodSupplierEnterprise) tblCart.getValueAt(row, 2);
        cart.get(e).getFoodList().remove(f);
        e.getFoods().addFood(f);
        populateTable();
        populateCart();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void treeFoodBankValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeFoodBankValueChanged
        selectedNode = (DefaultMutableTreeNode) treeFoodBank.getLastSelectedPathComponent();
    }//GEN-LAST:event_treeFoodBankValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<FoodType> foodTypeJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblFoodInfo;
    private javax.swing.JTree treeFoodBank;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void populateCart() {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);
        for (Map.Entry<Enterprise, FoodCatalog> e : cart.entrySet()) {
            for (Food f : e.getValue().getFoodList()) {
                Object[] row = new Object[3];
                row[0] = f;
                row[1] = f.getQuantity();
                row[2] = e.getKey();
                model.addRow(row);
            }
        }
    }
}
